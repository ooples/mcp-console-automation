# Docker MCP Registry Server Metadata
# For submission to https://github.com/docker/mcp-registry

# Server Identity
name: Console Automation
short_description: Production-ready MCP server for AI-driven console automation and monitoring
category: Development Tools

# Source Repository
github:
  owner: ooples
  repo: mcp-console-automation
  dockerfile: Dockerfile
  build_tier: docker-built  # Docker will build, sign, and publish

# Server Description
description: |
  MCP Console Automation enables AI assistants to fully interact with console applications,
  monitor output, detect errors, and automate terminal workflows - similar to how Playwright
  works for web browsers.

  Features 40 comprehensive tools organized into 6 categories:
  - Session Management (9 tools): Local and SSH console sessions
  - Command Execution (6 tools): Sync/async execution with error detection
  - Monitoring & Alerts (6 tools): System metrics, dashboards, alerts
  - Profile Management (4 tools): Save SSH and app connection profiles
  - Background Jobs (9 tools): Priority queuing and job execution
  - Test Automation (6 tools): Assertions, snapshots, state validation

# Tags for Discovery
tags:
  - console
  - terminal
  - automation
  - ssh
  - testing
  - monitoring
  - background-jobs
  - devops
  - ci-cd
  - remote-execution
  - playwright-for-terminal
  - test-automation

# License
license: MIT

# Platform Support
platforms:
  - linux/amd64
  - linux/arm64

# Configuration
configuration:
  # Optional: Enable SSH host key verification
  - name: SSH_STRICT_HOST_KEY_CHECKING
    description: Enable strict SSH host key checking (true/false)
    required: false
    default: "false"

  # Optional: SSH known hosts file location
  - name: SSH_KNOWN_HOSTS_FILE
    description: Path to SSH known_hosts file
    required: false
    default: "~/.ssh/known_hosts"

  # Optional: Default session timeout
  - name: SESSION_TIMEOUT_MS
    description: Default session timeout in milliseconds
    required: false
    default: "300000"

  # Optional: Enable debug logging
  - name: LOG_LEVEL
    description: Logging level (info, debug, trace)
    required: false
    default: "info"

# Health Check
health_check:
  enabled: true
  interval: 30s
  timeout: 5s
  retries: 3

# Resource Requirements
resources:
  memory_limit: 256MB
  cpu_limit: 0.5

# Documentation Links
documentation:
  readme: https://github.com/ooples/mcp-console-automation/blob/master/README.md
  tools: https://github.com/ooples/mcp-console-automation/blob/master/docs/TOOLS.md
  examples: https://github.com/ooples/mcp-console-automation/blob/master/docs/EXAMPLES.md
  issues: https://github.com/ooples/mcp-console-automation/issues

# Maintainer
maintainer:
  name: ooples
  url: https://github.com/ooples
  email: contact@github.com/ooples

# Version
version: 1.0.0

# Use Cases
use_cases:
  - DevOps automation and deployment workflows
  - CI/CD testing with assertions and validations
  - Remote server management with SSH profiles
  - System monitoring with metrics and alerts
  - Background job execution with priority queues
  - Test automation for CLI applications

# Key Features
features:
  - "40 comprehensive tools across 6 categories"
  - "Full SSH support with password and key-based authentication"
  - "Cross-platform: Windows, macOS, Linux"
  - "Test automation framework similar to Playwright"
  - "Production-ready: 100% test coverage, 0 vulnerabilities"
  - "Enterprise monitoring with dashboards and alerts"
  - "Background job execution with priority queuing"
  - "Connection profile management"

# Quality Metrics
metrics:
  tests_passing: 27/27
  test_coverage: 100%
  security_vulnerabilities: 0
  docker_image_size: ~150MB
  concurrent_sessions: 50+
